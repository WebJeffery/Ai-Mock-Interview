// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  interviews    Interview[]
  accounts      Account[]
  sessions      Session[]
}

// 面试记录模型
model Interview {
  id          String    @id @default(cuid())
  title       String
  position    String    // 面试职位
  level       String    // 面试难度
  status      String    // 面试状态
  feedback    String?   // 面试反馈
  score       Int?      // 面试得分
  duration    Int       // 面试时长（分钟）
  startedAt   DateTime? // 开始时间
  endedAt     DateTime? // 结束时间
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    Message[]
}

// 面试消息记录
model Message {
  id           String    @id @default(cuid())
  role         String    // system, user, assistant
  content      String    // 消息内容
  createdAt    DateTime  @default(now())
  interviewId  String
  interview    Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
}

// NextAuth 相关模型
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
} 